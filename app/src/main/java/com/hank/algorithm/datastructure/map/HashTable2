和HashMap一样，Hashtable也是一个散列表，它存储的内容是键值对(key-value)映射, 重要特点如下:

存储key-value键值对格式
是无序的
底层通过数组+链表的方式实现
通过synchronized关键字实现线程安全
key、value都不可以为null（为null时将抛出NullPointerException）

和HashMap相似，Hashtable底层采用数组+链表的数据结构，根据key找到数组对应的桶，相同的key通过链表维护，当数组桶的使用到达阈值后，会进行动态扩容。
但是和HashMap不同的是，链表不会转换为红黑树。

虽然Hashtable本身不常用了，但是它的直接子类Properties目前还在被大量使用当中，所以学习它还是有一定价值的。下面在总结下Hashtable和HashMap的区别：

线程是否安全：HashMap是线程不安全的，HashTable是线程安全的；HashTable内部的方法基本都经过 synchronized修饰; 如果想要线程安全的Map容器建议使用ConcurrentHashMap,性能更好。

对Null key 和Null value的支持：HashMap中，null可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为null；HashTable中key和value都不能为null，否则抛出空指针异常；

初始容量大小和每次扩充容量大小的不同：

创建时如果不指定容量初始值，Hashtable默认的初始大小为11，之后每次扩容，容量变为原来的2n+1。HashMap默认的初始化大小为16。之后每次扩充，容量变为原来的2倍；
创建时如果给定了容量初始值，那么Hashtable会直接使用你给定的大小，而HashMap会将其扩充 为2的幂次方大小。
底层数据结构：JDK1.8及以后的HashMap在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）,哈希表长度大于64，将链表转化为红黑树，以减少搜索时间，
Hashtable没有这样的机制。

原文链接：https://blog.csdn.net/LBWNB_Java/article/details/126985662